generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  orders    Order[]
  downloads Download[]
  cartItems CartItem[]
  
  @@map("users")
}

model Product {
  id              String   @id @default(cuid())
  examName        String
  examCode        String?
  description     String   @db.Text
  targetAudience  String   @db.Text
  difficultyLevel String
  questionsCount  Int
  examDuration    Int
  passingScore    String
  keyTopics       Json
  price           Float
  sampleQuestions Json
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  orderItems OrderItem[]
  downloads  Download[]
  cartItems  CartItem[]
  
  @@map("products")
}

model Order {
  id            String      @id @default(cuid())
  userId        String
  totalAmount   Float
  status        OrderStatus @default(PENDING)
  paymentMethod String
  paymentId     String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  // Relations
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
  payments   Payment[]
  
  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int      @default(1)
  price     Float
  createdAt DateTime @default(now())
  
  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])
  
  @@map("order_items")
}

model Payment {
  id            String        @id @default(cuid())
  orderId       String
  amount        Float
  currency      String        @default("USD")
  status        PaymentStatus @default(PENDING)
  paymentMethod String
  stripeId      String?
  paypalId      String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  @@map("payments")
}

model Download {
  id          String   @id @default(cuid())
  userId      String
  productId   String
  downloadUrl String
  expiresAt   DateTime
  downloadCount Int    @default(0)
  maxDownloads  Int    @default(10)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])
  
  @@map("downloads")
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])
  
  @@unique([userId, productId])
  @@map("cart_items")
}

model EmailNotification {
  id        String            @id @default(cuid())
  email     String
  type      NotificationType
  subject   String
  content   String            @db.Text
  status    EmailStatus       @default(PENDING)
  sentAt    DateTime?
  createdAt DateTime          @default(now())
  
  @@map("email_notifications")
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum NotificationType {
  ORDER_CONFIRMATION
  DOWNLOAD_READY
  DOWNLOAD_EXPIRING
  PAYMENT_CONFIRMATION
}

enum EmailStatus {
  PENDING
  SENT
  FAILED
}
